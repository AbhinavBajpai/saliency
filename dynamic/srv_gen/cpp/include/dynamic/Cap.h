/* Auto-generated by genmsg_cpp for file /home/phuicy/fuerte_workspace/sandbox/dynamic/srv/Cap.srv */
#ifndef DYNAMIC_SERVICE_CAP_H
#define DYNAMIC_SERVICE_CAP_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace dynamic
{
template <class ContainerAllocator>
struct CapRequest_ {
  typedef CapRequest_<ContainerAllocator> Type;

  CapRequest_()
  : poke(0)
  {
  }

  CapRequest_(const ContainerAllocator& _alloc)
  : poke(0)
  {
  }

  typedef int8_t _poke_type;
  int8_t poke;


  typedef boost::shared_ptr< ::dynamic::CapRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dynamic::CapRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct CapRequest
typedef  ::dynamic::CapRequest_<std::allocator<void> > CapRequest;

typedef boost::shared_ptr< ::dynamic::CapRequest> CapRequestPtr;
typedef boost::shared_ptr< ::dynamic::CapRequest const> CapRequestConstPtr;


template <class ContainerAllocator>
struct CapResponse_ {
  typedef CapResponse_<ContainerAllocator> Type;

  CapResponse_()
  : name()
  , msg()
  , pub(0)
  , sub(0)
  {
  }

  CapResponse_(const ContainerAllocator& _alloc)
  : name(_alloc)
  , msg(_alloc)
  , pub(0)
  , sub(0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  name;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _msg_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  msg;

  typedef int8_t _pub_type;
  int8_t pub;

  typedef int8_t _sub_type;
  int8_t sub;


  typedef boost::shared_ptr< ::dynamic::CapResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dynamic::CapResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct CapResponse
typedef  ::dynamic::CapResponse_<std::allocator<void> > CapResponse;

typedef boost::shared_ptr< ::dynamic::CapResponse> CapResponsePtr;
typedef boost::shared_ptr< ::dynamic::CapResponse const> CapResponseConstPtr;

struct Cap
{

typedef CapRequest Request;
typedef CapResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct Cap
} // namespace dynamic

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::dynamic::CapRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::dynamic::CapRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::dynamic::CapRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "62e2c5ae17c2c330a39c49ce0c2989bb";
  }

  static const char* value(const  ::dynamic::CapRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x62e2c5ae17c2c330ULL;
  static const uint64_t static_value2 = 0xa39c49ce0c2989bbULL;
};

template<class ContainerAllocator>
struct DataType< ::dynamic::CapRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dynamic/CapRequest";
  }

  static const char* value(const  ::dynamic::CapRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::dynamic::CapRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int8 poke\n\
\n\
";
  }

  static const char* value(const  ::dynamic::CapRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::dynamic::CapRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::dynamic::CapResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::dynamic::CapResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::dynamic::CapResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "788b9796b5ad2bac96e86245358b39ff";
  }

  static const char* value(const  ::dynamic::CapResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x788b9796b5ad2bacULL;
  static const uint64_t static_value2 = 0x96e86245358b39ffULL;
};

template<class ContainerAllocator>
struct DataType< ::dynamic::CapResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dynamic/CapResponse";
  }

  static const char* value(const  ::dynamic::CapResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::dynamic::CapResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string name\n\
string msg\n\
int8 pub\n\
int8 sub\n\
\n\
\n\
";
  }

  static const char* value(const  ::dynamic::CapResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::dynamic::CapRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.poke);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CapRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::dynamic::CapResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.name);
    stream.next(m.msg);
    stream.next(m.pub);
    stream.next(m.sub);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CapResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<dynamic::Cap> {
  static const char* value() 
  {
    return "e0c84457e4f5a08d43be0de82553d460";
  }

  static const char* value(const dynamic::Cap&) { return value(); } 
};

template<>
struct DataType<dynamic::Cap> {
  static const char* value() 
  {
    return "dynamic/Cap";
  }

  static const char* value(const dynamic::Cap&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<dynamic::CapRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e0c84457e4f5a08d43be0de82553d460";
  }

  static const char* value(const dynamic::CapRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<dynamic::CapRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dynamic/Cap";
  }

  static const char* value(const dynamic::CapRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<dynamic::CapResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e0c84457e4f5a08d43be0de82553d460";
  }

  static const char* value(const dynamic::CapResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<dynamic::CapResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dynamic/Cap";
  }

  static const char* value(const dynamic::CapResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // DYNAMIC_SERVICE_CAP_H

