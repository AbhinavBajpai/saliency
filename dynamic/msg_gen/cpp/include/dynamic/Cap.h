/* Auto-generated by genmsg_cpp for file /home/phuicy/fuerte_workspace/sandbox/dynamic/msg/Cap.msg */
#ifndef DYNAMIC_MESSAGE_CAP_H
#define DYNAMIC_MESSAGE_CAP_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace dynamic
{
template <class ContainerAllocator>
struct Cap_ {
  typedef Cap_<ContainerAllocator> Type;

  Cap_()
  : name()
  , msg()
  , pub(0)
  , sub(0)
  {
  }

  Cap_(const ContainerAllocator& _alloc)
  : name(_alloc)
  , msg(_alloc)
  , pub(0)
  , sub(0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  name;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _msg_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  msg;

  typedef int8_t _pub_type;
  int8_t pub;

  typedef int8_t _sub_type;
  int8_t sub;


  typedef boost::shared_ptr< ::dynamic::Cap_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dynamic::Cap_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Cap
typedef  ::dynamic::Cap_<std::allocator<void> > Cap;

typedef boost::shared_ptr< ::dynamic::Cap> CapPtr;
typedef boost::shared_ptr< ::dynamic::Cap const> CapConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::dynamic::Cap_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::dynamic::Cap_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace dynamic

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::dynamic::Cap_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::dynamic::Cap_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::dynamic::Cap_<ContainerAllocator> > {
  static const char* value() 
  {
    return "788b9796b5ad2bac96e86245358b39ff";
  }

  static const char* value(const  ::dynamic::Cap_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x788b9796b5ad2bacULL;
  static const uint64_t static_value2 = 0x96e86245358b39ffULL;
};

template<class ContainerAllocator>
struct DataType< ::dynamic::Cap_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dynamic/Cap";
  }

  static const char* value(const  ::dynamic::Cap_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::dynamic::Cap_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string name\n\
string msg\n\
int8 pub\n\
int8 sub\n\
\n\
";
  }

  static const char* value(const  ::dynamic::Cap_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::dynamic::Cap_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.name);
    stream.next(m.msg);
    stream.next(m.pub);
    stream.next(m.sub);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Cap_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dynamic::Cap_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::dynamic::Cap_<ContainerAllocator> & v) 
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "msg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.msg);
    s << indent << "pub: ";
    Printer<int8_t>::stream(s, indent + "  ", v.pub);
    s << indent << "sub: ";
    Printer<int8_t>::stream(s, indent + "  ", v.sub);
  }
};


} // namespace message_operations
} // namespace ros

#endif // DYNAMIC_MESSAGE_CAP_H

