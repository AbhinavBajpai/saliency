#ifndef ROSDY_H
#define ROSDY_H

#include <string>
#include "ros/ros.h"
#include <iostream>
#include <mutex>

using namespace std;

template <class M>
class dyPublisher 
{
  public:
	dyPublisher(string UIDin, ros::NodeHandle n);
	string topic;
	string data_class;
	string name;
	string UID;
	ros::Publisher pubg;
	ros::NodeHandle  nh;
	void onShutdown();
	bool checkForTopic();
	void publish(const M& message);
	void changeTopic();
	void pubap();


  private:
	bool set;
	
};


template <class M>
class dySubscriber 
{
  public:
	string topic;
	string data_class;
	string name;
	string UID;
	mutex muta;
	dySubscriber(string UIDin, ros::NodeHandle n, mutex * mutag);
	dySubscriber(string UIDin, ros::NodeHandle n);

	
	void onShutdown();
	bool checkForTopic();
	
	

	void subscribe(void(*fp)(M));


  private:
	bool set;
	ros::Subscriber subg;
	ros::NodeHandle  nh;
	bool first;
	bool second;
	bool test;
	bool lockable;
	bool change;
	bool stop;
};


#endif
